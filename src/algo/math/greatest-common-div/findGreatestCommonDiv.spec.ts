import { euclideanAlgoRecursive, euclideanAlgoIterative } from "./findGreatestCommonDiv"

describe("Algo: Greatest common div", () => {
  test("euclidean algo (recursive)", () => {
    expect(euclideanAlgoRecursive(0, 0)).toBe(0)
    expect(euclideanAlgoRecursive(2, 0)).toBe(2)
    expect(euclideanAlgoRecursive(0, 2)).toBe(2)
    expect(euclideanAlgoRecursive(1, 2)).toBe(1)
    expect(euclideanAlgoRecursive(2, 1)).toBe(1)
    expect(euclideanAlgoRecursive(6, 6)).toBe(6)
    expect(euclideanAlgoRecursive(2, 4)).toBe(2)
    expect(euclideanAlgoRecursive(4, 2)).toBe(2)
    expect(euclideanAlgoRecursive(12, 4)).toBe(4)
    expect(euclideanAlgoRecursive(4, 12)).toBe(4)
    expect(euclideanAlgoRecursive(5, 13)).toBe(1)
    expect(euclideanAlgoRecursive(27, 13)).toBe(1)
    expect(euclideanAlgoRecursive(24, 60)).toBe(12)
    expect(euclideanAlgoRecursive(60, 24)).toBe(12)
    expect(euclideanAlgoRecursive(252, 105)).toBe(21)
    expect(euclideanAlgoRecursive(105, 252)).toBe(21)
    expect(euclideanAlgoRecursive(1071, 462)).toBe(21)
    expect(euclideanAlgoRecursive(462, 1071)).toBe(21)
    expect(euclideanAlgoRecursive(462, -1071)).toBe(21)
    expect(euclideanAlgoRecursive(-462, -1071)).toBe(21)
  })

  test("euclidean algo (iterative)", () => {
    expect(euclideanAlgoIterative(0, 0)).toBe(0)
    expect(euclideanAlgoIterative(2, 0)).toBe(2)
    expect(euclideanAlgoIterative(0, 2)).toBe(2)
    expect(euclideanAlgoIterative(1, 2)).toBe(1)
    expect(euclideanAlgoIterative(2, 1)).toBe(1)
    expect(euclideanAlgoIterative(6, 6)).toBe(6)
    expect(euclideanAlgoIterative(2, 4)).toBe(2)
    expect(euclideanAlgoIterative(4, 2)).toBe(2)
    expect(euclideanAlgoIterative(12, 4)).toBe(4)
    expect(euclideanAlgoIterative(4, 12)).toBe(4)
    expect(euclideanAlgoIterative(5, 13)).toBe(1)
    expect(euclideanAlgoIterative(27, 13)).toBe(1)
    expect(euclideanAlgoIterative(24, 60)).toBe(12)
    expect(euclideanAlgoIterative(60, 24)).toBe(12)
    expect(euclideanAlgoIterative(252, 105)).toBe(21)
    expect(euclideanAlgoIterative(105, 252)).toBe(21)
    expect(euclideanAlgoIterative(1071, 462)).toBe(21)
    expect(euclideanAlgoIterative(462, 1071)).toBe(21)
    expect(euclideanAlgoIterative(462, -1071)).toBe(21)
    expect(euclideanAlgoIterative(-462, -1071)).toBe(21)
  })
})
